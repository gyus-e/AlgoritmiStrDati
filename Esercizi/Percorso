//Siano dati due grafi orientati G1 = (V, E1); G2 = (V, E2)
//s, v appartenenti a V 

//si scriva un algoritmo che verifichi in tempo lineare sui due grafi in ingresso 
//se sono soddisfatte entrambe le seguenti condizioni:
//1. Ogni percorso finito massimale in G1 che parte da s non passa per v;
//2. Tutti i percorsi infiniti in G2 che partono da s passano per v.

Init (G)
{
    for each v in V 
    {
        color [v] = white;
    }
}

Algoritmo (G1, G2, s, v)
{    
    //1. DFS per cercare un percorso finito massimale che contiene v. Una volta trovato restituisce false.    
    Init (G1);
    cond1 = DFS_Visit_1 (G1, s, v, false, true);

    //2. DFS per cercare un ciclo che parte da s e non contiene v. Una volta trovato restituisce false.
    Init (G2);
    color [v] = black; //ignoro v nella visita 2
    cond2 = DFS_Visit_2 (G2, s, v, true);

    return cond1 && cond2;    
}

DFS_Visit_1 (G1, s, v, found, ciclo)
{
    //1. Ogni percorso finito massimale in G1 che parte da s non passa per v;
    //Cioé: Non esiste un percorso finito massimale che parte da s e passa per v
    
    //False se
    //1: passo per v
    //2: non trovo cicli

    //assumo inizialmente ciclo = true e found = false
    if (found && !ciclo)
    {
        cond1 = false;
    }
    //se ret == false non ho bisogno di continuare con la ricorsione
    if (cond1 != false)
    {
        //controllo se ho trovato v
        if (s == v)
        {
            found = true;
            //a questo punto, found verrá passato come true per tutte le visite successive
        }
        //comincio la DFS
        color [s] = gray;
        for each u in G1.Adj[s]
        {
            if (color [u] == black)
            {
                //Ho terminato la visita e non ho trovato un ciclo
                ciclo = false;
            }
            else if (color [u] == white)
            {
                cond1 = DFS_Visit_1 (G1, u, v, found, ciclo);
                //se gli passo ciclo = false e found = true, restituirá automaticamente false
            }
        }
        color [s] = black;
    }
    return cond1;
}

DFS_Visit_2 (G2, s, v, cond2)
{
    //Restituire false se lungo uno stesso percorso non trovo v ma trovo un ciclo
    //Assumo che v sia colorato di nero, quindi controlleró solo gli archi che non passano per v
    //Basta quindi un semplice algoritmo di ricerca di cicli

    //Assumo cond2 = true alla prima chiamata
    color [s] = gray;
    if (cond2 != false)
    {     
        for each u in G2.Adj [s]
        {
            if (color [u] == white)
            {
                cond2 = DFS_Visit_2 (G2, u, v, cond2);
            }
            else if (color [u] == gray) //ciclo che non contiene v
            {
                cond2 = false;
            }
        }
    }
    color [s] = black;
    return cond2;
}

//Sfida: modificare DFS_Visit_2 in modo da restituire true se:
//Tutti i percorsi infiniti che partono da s passano per v infinite volte

DFS_Visit_2b (G2, s, v, loop, cond2b)
{
    //restituire false se trovo un ciclo che non contiene v 
    //non posso assumere v nero perché ammetto che v sia in un percorso che porta al ciclo, purché non sia nel ciclo

    //2 metodi: 

    //1: uso i tempi di scoperta 
    //se trovo un vertice grigio u, lo identifico come l'inizio del ciclo
    //teorema della struttura a parentesi: se la visita su v è iniziata dopo e terminata prima di quella su u, allora v appartiene al ciclo

    //2: uso le componenti fortemente connesse
    //trovo le componenti fortemente connesse
    //se una non contiene v, restituisco false

    //utilizzeró il metodo 2
    CFC_graph = ComponentiFortementeConnesse (G);
    for (int i = 0; CFC_graph != NULL; i++)
    {
        if (CFC_graph [v] != CFC_graph [i]) //per ogni componente fort connessa, se questa non è anche la componente fort connessa di v, allora esiste un ciclo che non contiene v
        {
            return false;
        }
    }
    return true;
}

ComponentiFortementeConnesse (G)
{
    DF_forest = DFS (G);
    Gt = Trasposto (G);
    CFC_graph = DFS_Trasposto (Gt, DF_forest);
}

DFS (G)
{
    Init (G);
    for each s in V 
    {
        DF_forest [i] = DFS_visit (G, s); //ogni iterazione restituisce un albero depth first
        i++;
    }
    return DF_forest;
}

DFS_visit (G, s)
{
    color [s] = gray;
    for each u in G.Adj [s];
    {
        if (color [u] == white)
        {
            DF_tree = DFS_visit (G, u);
        }
    }
    color [s] = black;
    push (s, DF_tree);
    return DF_tree;
}

Trasposto (G)
{
    Gt = (Vt, Et);
    for each v in V 
    {
        add (Vt, v);
        for each u in G.Adj [v];
        {
            add (Gt.Adj [u], v);
        }
    }
    return Gt;
}

DFS_Trasposto (Gt, DF_forest)
{
    Init (Gt);
    for (int i = 0; DF_forest [i] != NULL; i++)
    {
        if (color [CFC_graph [i]]==white)
        {
            CFC_graph [i] = DFS_trasposto_visit (Gt, DF_forest [i]);
        }
    }
    return CFC_graph;
}

DFS_trasposto_visit (Gt, s);
{
    color [s] = gray;
    for each u in Adj [s]
    {
        if (color [u] == white)
        {
            CFC = DFS_trasposto_visit (Gt, u);
        }
    }
    color [s] = black;
    push (CFC, s);
    return CFC;
}